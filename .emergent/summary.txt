<analysis>
The previous AI engineer successfully brought Météo Sentinelle (now Klimaclique) from an MVP to a more stable state. Initial work focused on fixing core bugs like the cloud overlay and map alignment, then implementing UI enhancements such as site-wide renaming, homepage animations, and dynamic weather animations. A significant achievement was resolving inconsistent weather forecasts by correcting mock data generation and improving NASA API fallback mechanisms. The current trajectory shows the engineer primarily addressing user requests for active user count, dynamic testimonials, and extensive mobile responsiveness for both the homepage and the interactive map. The most recent and challenging task has been refactoring the AI prediction system to precompute data hourly due to performance issues on the deployed environment. This refactor introduced new bugs, primarily incorrect function parameters for the AI model and a recurring white page error, which is the immediate focus.
</analysis>

<product_requirements>
Klimaclique (formerly Météo Sentinelle) is a Guadeloupe-focused natural risk anticipation application providing 5-day weather forecasts, alerts (SMS/email), and interactive maps with wind, rain, and temperature data. It emphasizes a serious, modern design with deep blue, white, and orange. Built on React, FastAPI, and MongoDB, it integrates NASA and OpenWeatherMap APIs. Key features include an AI-driven cyclonic damage prediction (global and commune-specific), an enhanced landing page with ad sections, intelligent caching, and pluviometer views. User requests have driven recent development, including renaming the app, adding homepage animations, dynamic weather animations based on AI vigilance, and a preview for orange vigilance. Post-handover, the user explicitly requested implementing an active user counter, dynamic and anonymous testimonials with submission capability, and comprehensive mobile interface adjustments for both the homepage (including the new features) and the interactive map. The latest critical request involves precomputing AI predictions offline hourly to improve performance, as current live predictions cause timeouts.
</product_requirements>

<key_technical_concepts>
-   **Full-Stack Architecture**: React (frontend), FastAPI (backend), MongoDB (database).
-   **API Integration**: NASA GIBS, OpenWeatherMap, Météo France.
-   **Data Management**: Caching, multi-level fallback, API quota, data backup.
-   **AI/ML**: RandomForestRegressor for cyclone damage, dynamic risk adaptation, precalculation.
-   **Interactive Mapping**: Leaflet.js, custom tile overlays, mobile adaptations.
-   **Dynamic UI/UX**: Adaptive theming, animations, responsive design.
-   **Task Scheduling**: APScheduler for automated AI precalculation.
</key_technical_concepts>

<code_architecture>
The application follows a standard MERN-like stack structure:



-   ****: Defines Pydantic models for MongoDB.
    -   **Changes**: Added  and  models to support user activity tracking and user-submitted testimonials.
-   ****: Main FastAPI application, defines API routes.
    -   **Changes**: New  and  (GET/POST) endpoints added. Imports for , , and  were added. AI prediction endpoints (, , ) were modified to serve precalculated data from  instead of real-time model inference.
-   ** (NEW)**: Manages active user counts and testimonial storage/retrieval.
    -   **Summary**: New file created to handle the logic for user activity logging and testimonial management.
-   ** (NEW)**: Handles the precalculation and caching of AI prediction data.
    -   **Summary**: New file created to offload real-time AI calculations into a scheduled precomputation process.
-   ** (NEW)**: Schedules the  to run periodically (hourly).
    -   **Summary**: New file created to automate the AI data precomputation.
-   ****: AI model for cyclone damage prediction.
    -   **Changes**: The  function signature was re-examined due to parameter mismatches in calls, but the actual function definition remains, now called by the precalculation service.
-   ****: Contains Guadeloupe commune data.
    -   **Changes**: Modified to explicitly create  (a list) from the existing  (a dictionary) to resolve import and usage errors in backend services.
-   ****: Renders the homepage.
    -   **Changes**: Old static testimonial data removed. New logic and UI components integrated for dynamic active user count display and dynamic testimonials with a submission form. Extensive mobile responsiveness adjustments made for these new elements.
-   ****: Displays the interactive map.
    -   **Changes**: Initial mobile optimizations (zoom, controls, marker popups, larger markers). Attempted conditional rendering for a mobile list view instead of the map, but this led to syntax errors and was reverted to a working state with only map-based mobile optimizations. Debugging additions for  display. Layer panel adjusted (repositioned, resized, close button) to prevent interference with map interactions. Fix for incorrect  usage in .
-   ****: Core Leaflet map component used within .
    -   **Changes**: Popups optimized (smaller, less intrusive) for the vigilance map.  configured to auto-close popups.  function modified for larger, more tactile markers on mobile vigilance map.
-   ****: Frontend service for API calls.
    -   **Changes**: Updated  configuration to use  for better robustness in production and added longer timeouts and CORS handling for AI prediction calls.
-   ****: Global CSS styles.
    -   **Changes**: Added specific media queries and styles for mobile optimization of the homepage (testimonials, active user count) and map components.

</code_architecture>

<pending_tasks>
-   Configure Social Media API Keys: Facebook and Twitter API keys need to be provided by the user in .
-   Complete Ad Slots Frontend Integration: Ensure all requested ad slot placements on  are correctly implemented.
-   Reconnect Météo France API: The primary Météo France API requires credentials.
-   Resolve AI Per-Commune Prediction Errors: Backend is currently expecting incorrect parameters for  after precalculation refactor.
-   Implement Mobile Commune List for Map: User requested a clickable list on mobile instead of the map to improve usability.
</pending_tasks>

<current_work>
Immediately prior to this summary, the AI engineer was deep into a critical debugging cycle related to the AI prediction functionality, specifically for per-commune analysis when the application is deployed. Despite backend API calls for AI predictions (e.g., ) returning successful 200 OK responses when tested manually, the frontend was consistently displaying Erreur lors du chargement des prédictions IA (Error loading AI predictions), and crucially, the user reported a white page error for the entire preview.

The engineer's recent efforts focused on:
1.  **AI Precalculation Implementation**: To resolve perceived frontend timeouts and improve performance, a major architectural change was initiated to precompute AI predictions hourly. This involved creating new services:
    -   : For the actual data precomputation and caching.
    -   : To schedule the precomputation.
    -   Modifying  to serve these cached predictions.
2.  **Debugging Backend IA (Post-Refactor)**: After implementing precalculation, the backend started throwing  for  (fixed in ) and a  for  (fixed by creating the list from  in  and updating  imports). The latest error observed in backend logs for AI prediction calls is: . This indicates that the  or its calling logic is passing an incorrect parameter () to the  function in , which expects  (a dictionary).
3.  **Frontend Critical Error**: The recurring white page error, reported by the user, indicates a critical frontend crash preventing the application from rendering at all. This likely stems from recent, possibly incomplete or erroneous, frontend modifications made during the mobile map list implementation attempt or earlier AI panel debugging. The trajectory shows the MapPage.js has been in a volatile state due to syntax errors.

The current state is that the backend AI endpoints are failing due to a parameter mismatch in the  function call, and the frontend is entirely broken, presenting a white page.
</current_work>

<optional_next_step>
Diagnose and fix the white page frontend error, then correct the  function call parameters in the backend's AI prediction logic.
</optional_next_step>
